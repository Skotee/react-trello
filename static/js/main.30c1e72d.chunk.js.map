{"version":3,"sources":["components/Task.js","components/TaskList.js","actions/listsActions.js","actions/index.js","App.js","serviceWorker.js","reducers/tasklistReducer.js","reducers/index.js","store/configStore.js","index.js"],"names":["TaskStyles","styled","div","_templateObject","TaskText","_templateObject2","Task","_ref","text","id","index","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","String","provided","Object","assign","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","ListWrapper","TaskList_templateObject","TaskTitle","TaskList_templateObject2","TaskList","title","tasks","listID","droppableId","type","droppableProps","map","task","components_Task","key","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","CONSTANTS","DRAG_HAPPENED","payload","Column","App_templateObject","App","onDragEnd","result","destination","source","_this","props","dispatch","lists","this","Fragment","direction","list","components_TaskList","Component","connect","state","Boolean","window","location","hostname","match","initialState","concat","tasklistReducer","arguments","length","undefined","action","newState","toConsumableArray","_action$payload","splice","apply","_list$tasks","find","_listEnd$tasks","combineReducers","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30c1e72d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\"\r\n\r\nconst TaskStyles = styled.div `\r\n    overflow: hidden;\r\n    padding: 2px 6px 2px;\r\n    position: relative;\r\n    margin: 4px;\r\n    font-size: 14px;\r\n    color: gray;\r\n`;\r\n\r\nconst TaskText = styled.div `\r\n    font-size: 14px;\r\n    color: gray;\r\n    word-wrap: break-word;\r\n    overflow-wrap: break-word;\r\n`;\r\n\r\n\r\nconst Task = ({ text, id, index }) => {\r\n    return(\r\n        <Draggable draggableId={String(id)} index={index}>\r\n        {provided => (\r\n            <TaskStyles\r\n                ref={provided.innerRef}\r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}\r\n            >\r\n                <Card>\r\n                    <CardContent>\r\n                        <TaskText>{text}</TaskText>\r\n                    </CardContent>\r\n                </Card>\r\n            </TaskStyles>\r\n        )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport styled from \"styled-components\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst ListWrapper = styled.div `\r\n    font-size: 24px;\r\n    background-color: #dfe1e6;\r\n    border-radius: 3px;\r\n    width: 272px;\r\n    margin: 10px 7px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    display: inline-block;\r\n    vertical-align: top;\r\n`;\r\n\r\nconst TaskTitle = styled.div `\r\n    padding: 10px 8px 8px 12px;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n`;\r\n\r\n\r\nconst TaskList = ({ title, tasks, listID, index }) => {\r\n    return(\r\n        <Draggable draggableId={String(listID)} index={index}>\r\n            {provided => (\r\n                <ListWrapper\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                        {...provided.dragHandleProps}\r\n                    >\r\n                    <Droppable droppableId={String(listID)} type=\"task\">\r\n                        {provided => (\r\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                                <TaskTitle>{title}</TaskTitle>\r\n                                {tasks.map((task, index) => (\r\n                                    <Task key={task.id} index={index} id={task.id} text={task.text}></Task>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </ListWrapper>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default TaskList;","import { CONSTANTS } from \".\";\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n) => {\r\n    return {\r\n        type: CONSTANTS.DRAG_HAPPENED,\r\n        payload: {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    };\r\n};","export * from \"./listsActions\";\r\n\r\nexport const CONSTANTS = {\r\n    DRAG_HAPPENED: \"DRAG_HAPPENED\"\r\n}","import React, { Component } from 'react';\nimport TaskList from \"./components/TaskList\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"./actions\";\n\n\nconst Column = styled.div `\n    display: flex;\n    flex-direction: row;\n`;\n\nclass App extends Component {\n  onDragEnd = result => {\n    const {destination, source, draggableId, type} = result;\n    if(!destination) {\n      return;\n    }\n\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    )\n  };\n\n    render() {\n    const { lists } = this.props;\n    return (\n        <>\n          <h1>React Trello</h1>\n          <h2>Welcome Board</h2>\n          <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type = \"list\">\n            {provided => (\n              <Column\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {lists.map((list,index) => (\n                  <TaskList listID={list.id}\n                    key={list.id}\n                    title={list.title}\n                    tasks={list.tasks}\n                    index={index}\n                  />\n                ))}\n              </Column>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists,\n  tasks: state.tasks\n})\n\nexport default connect(mapStateToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CONSTANTS } from \"../actions\";\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"Beginner\",\r\n        id: `list-${0}`,\r\n        tasks: [\r\n            {\r\n                id: `task-${0}`,\r\n                text: \"pierwszy opis listy pierwszej\"\r\n            },\r\n            {\r\n                id: `task-${1}`,\r\n                text: \"drugi opis listy pierwszej\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Intermediate\",\r\n        id: `list-${1}`,\r\n        tasks: [\r\n            {\r\n                id: `task-${2}`,\r\n                text: \"pierwszy opis listy drugiej\"\r\n            },\r\n            {\r\n                id: `task-${3}`,\r\n                text: \"drugi opis listy drugiej\"\r\n            },\r\n            {\r\n                id: `task-${4}`,\r\n                text: \"trzeci opis listy drugiej\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Advanced\",\r\n        id: `list-${2}`,\r\n        tasks: [{\r\n                id: `task-${5}`,\r\n                text: \"pierwszy opis listy trzeciej\"\r\n            },\r\n            {\r\n                id: `task-${6}`,\r\n                text: \"drugi opis listy trzeciej\"\r\n            },\r\n            {\r\n                id: `task-${7}`,\r\n                text: \"trzeci opis listy trzeciej\"\r\n            },\r\n            {\r\n                id: `task-${8}`,\r\n                text: \"czwarty opis listy trzeciej\"\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n\r\nconst tasklistReducer = (state = initialState, action) => {\r\n    switch (action.type)\r\n    {\r\n        case CONSTANTS.DRAG_HAPPENED:\r\n            const newState = [...state];\r\n            const {\r\n                    droppableIdStart,\r\n                    droppableIdEnd,\r\n                    droppableIndexStart,\r\n                    droppableIndexEnd,\r\n                    type\r\n            } = action.payload;\r\n\r\n//dragging list around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart,1);\r\n                newState.splice(droppableIndexEnd,0,...list);\r\n                return newState;\r\n            }\r\n\r\n//in the same list\r\n            if(droppableIdStart === droppableIdEnd) {\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const task = list.tasks.splice(droppableIndexStart, 1);\r\n                list.tasks.splice(droppableIndexEnd, 0, ...task);\r\n            }\r\n\r\n//in the other list\r\n            if(droppableIdStart !== droppableIdEnd) {\r\n                //find the list where drag happended\r\n                const listStart = state.find(list => droppableIdStart === list.id)\r\n\r\n                //pull out the task from this list\r\n                const task = listStart.tasks.splice(droppableIndexStart,1);\r\n\r\n                //find the list where drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n\r\n                //put the task in the new list\r\n                listEnd.tasks.splice(droppableIndexEnd,0,...task);\r\n            }\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tasklistReducer;","import { combineReducers } from \"redux\";\r\nimport tasklistReducer from \"./tasklistReducer\"\r\n\r\nexport default combineReducers({\r\n    lists: tasklistReducer\r\n});","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\n\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/configStore\"\n\n\nReactDOM.render(<Provider store={store}> <App/> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}